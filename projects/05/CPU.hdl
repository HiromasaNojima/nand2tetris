// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15], out=aInstruction);

    // ARegister

    // A instruction or ALU out
    Mux16(a=toRegister, b=instruction, out=toARegister, sel=aInstruction);
    // d1 or A instruction
    Or(a=aInstruction, b=instruction[5], out=loadA);
    ARegister(in=toARegister, load=loadA, out=aRegisterOut, out[0..14]=addressM);

    // decide Aregister or RAM[A] to alu
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=toAlu);

    // if c1 then dRegisterOut = 0
    // if c2 then !dRegisterOut
    // if c3 then toAlu = 0
    // if c4 then !toAlu
    // if c5 then add
    // if c6 then !out
    ALU(x=dRegisterOut, y=toAlu, zx=instruction[11], nx=instruction[10],zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],out=outM, out=toRegister, zr=zr, ng=ng);

    // if C instruction and d2 then load
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=toRegister, load=loadD, out=dRegisterOut);

    // if C instruction and d3 then writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // jump conditions
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    And(a=notZr, b=notNg, out=plus);
    Or(a=zr, b=notNg, out=plusOrZero);
    And(a=ng, b=notZr, out=minus);
    Or(a=minus, b=zr, out=minusOrZero);
    
    // JGT
    And(a=plus, b=instruction[0], out=jgt);
    // JEQ
    And(a=zr, b=instruction[1], out=jeq);
    // JGE
    And(a=instruction[0], b=instruction[1], out=j2Andj3);
    And(a=plusOrZero, b=j2Andj3, out=jge);
    // JLT
    And(a=minus, b=instruction[2], out=jlt);
    // JNE
    And(a=instruction[2], b=instruction[0], out=j1Andj3);
    And(a=j1Andj3, b=notZr, out=jne);
    // JLE
    And(a=instruction[2], b=instruction[1], out=j1Andj2);
    And(a=j1Andj2, b=minusOrZero, out=jle);
    // JMP
    And(a=j1Andj2, b=instruction[0], out=jmp);
    Or8Way(in[0]=jgt, in[1]=jeq, in[2]=jge, in[3]=jlt, in[4]=jne, in[5]=jle, in[6]=jmp, out=jump);

    And(a=jump, b=instruction[15], out=loadPC);

    PC(in=aRegisterOut, reset=reset, load=loadPC, inc=true, out[0..14]=pc);
}